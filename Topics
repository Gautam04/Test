Topics to be add:-
1) Intro about version control:
 Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.

2)Types of VCS with explanation //optional

3)Introduction about git:
Git is a version control system for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for source code management in software development,[8] but it can be used to keep track of changes in any set of files. As a distributed revision control system it is aimed at speed,[9] data integrity,[10] and support for distributed, non-linear workflows.[11]

Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development.[12] Its current maintainer since 2005 is Junio Hamano.

As with most other distributed version control systems, and unlike most clientâ€“server systems, every Git directory on every computer is a full-fledged repository with complete history and full version tracking abilities, independent of network access or a central server.[13]

Git is free software distributed under the terms of the GNU General Public License version 2.

4)How to use Git:

Write the different commands in git with a brief explanation.
Also paste screenshots while explaining each command.

Different commands in Git:
git init
git status
git add
git commit
git log
git remote add
git pull
git push
git reset
git rm
git branch
git checkout
git stash
git merge

git init:
This command initializes the current directory as a git repository. A repository is a directory where you can version control your files. When we do git init,
git adds a hidden directory in our working directory.

git add:
The next thing we must do after initializing our working directory as a repository is to start tracking the files in the repository. In order to start version controlling our files, we must explicitly tell our repo to keep track of the files using git add. Once we use a git add command on a file, git now keeps track of the file and notifies us when the file has been modified.
This command is used in another scenario as well. Suppose we already have a file which git is already keeping track of. Now if this particular file is modified, then now we have to save this change. To do this, first we use the 'git add <filename>' command. This commands adds the particular file to the staging area. The staging area refers to files which are ready to be commited.

git status:
Whenever we are working in a repository, it is always good practice to check the status of files in the repo. Status refers to whether if the files in the repository are being tracked by git or not, whether the files have been modified or not, whether the files have been staged or not etc. For this purpose we use the git status command.

git commit:
Now once you have made all the required changes to your files, you would want to save this version of the repository with the changes made to the particular files in the repository. This is accomplished using the 'git commit' command.
Each time you use the git commit command, git takes a snapshot of your repository at that point. Each snapshot will be stored so that you can revert back to any of the older versions of the repository if you want. The snapshot taken will only contain the files that are being tracked by git. So, if you haven't added some files using the 'git add ' command, that file will not be present in the snapshot taken when the 'git commit' command is used. The changes in files present in the staging area will be incorporated into the snapshot. Along with each commit, we usually add a message which tells us what change has been in a particular commit.Therfore, the form of a commit command in git is
'git commit -m 'Message''.

git reset:
Now you have made some changes to a file and have staged this file. But suddenly you realize the files is not ready to be commited yet, but the file has already been staged. In this case , we use the git reset command. This command is used to unstage files which are already staged. This command is of the form 
'git reset <filename>'.

git diff:
Before commiting , it is good to know what changes we have to the files. To accomplish this, the 'git diff' command is used. When we use the git diff command , we can see the changes made from the version of the files present in the previous commit. The git diff command has different forms.
'git diff' : It tells us the changes made in the files which are unstaged.
'git diff --staged': It tells us the changes made in the files which have been staged.
'git diff HEAD': It tells us the changes made in all the files when compared with the last commit.
The HEAD is a pointer that holds your position within all your different commits. By default HEAD points to your most recent commit.

git log:
At any point if we want to see the history of your repository(list commits made), we use the git log command. When we use the command, we can see the author of the commit, the date on which the commit was made and the message that was saved along each commit. We can use 'git log --summary' to see more information about each commit.
 
Remote Repositries:
Remote repositories are versions of your project that are hosted on the Internert or network somewhere. Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work. Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more. Examples of remote repositories are those repositories present in Github.

git remote add:
Before we push into a remote repo , we must create a remote repo somewhere say on Github. Once we have created a remote repository, we now have to connect the remote repo with our local repo so that we can push to and pull from the remote repo. To do this, we use the git remote add command.This command is of the form 
'git remote add <remote_name> <url>'. We can give any remote name, but it is typical to name your main remote as origin. Url refers to the repository URL. An example of a repository URL is ' https://github.com/try-git/try_git.git'.


git push:
The git push command is used to push the contents of your local repository into the remote repository present on Github. We need to specify which remote we are pushing into and also need to specify which branch in the remote repository. This command is of the form 'git push -u <remote_name> <branch_name>'. The -u option of the push command tells git to remember the paramters, so that next time we can simply run git push and git will know what to do.

git pull:
Suppose that you are working with many people on a project and you have a remote repo on Github. After a period of time , if we want to see the changes made by others we can use the git pull command to pull files from the remote repo to our local one. When we use git pull, it merges our current local repo with the files obtained from the remote repo. Just as in the case of git push, we need to specify the name of the remote and the branch from which we are pulling. The git pull command will be of the form 'git pull <remote_name> <branch_name>'.

git rm:
The git rm command is used to remove files from the repo. Along with removal from the repo, this command also stages the removal of the files. That is, when we use the git status command, we can see the deleted files in the staging area. Now if we commit, these files will be removed in the snapshot of the repository.
If we want to delete an entire folder of files, we use the command 'git rm -r <folder_name>'. 

git branch:
Branches are what naturally happens when you want to work on multiple features at the same time. In git when we create a branch , a copy of the repository in the current state is created. We can work on this branch and make changes to it without affecting the main branch. We use when we must work on multiple features at the same time. A separate branch can be created for each feature. Now, in git to create a branch we use the command 'git branch <branch_name>'. This creates a copy of the current state of the current branch we are on. Once we finish working on a branch, we can merge the branch with the main branch.

git checkout:
This command is used to generally to switch from one branch to another. For example, consider that we are initially on the branch 'master'. Now we create a branch named 'test'. In order to work on the branch , we have to switch branches. This is accomplished by the command 'git checkout test'. 
Another use of the git checkout is to undo changes made to files and revert them back to the state they were during the last commit. For example, if we have a file named target, and we want to revert this file back to the way it was during the previous commit we use the statement 'git checkout -- target'. This will undo all the changes made to the file target since the last commit.

git merge:
Once we have finished working on a feature which is on a separate branch, we would like to add this feature to our main branch. To do this, we must merge out feature branch with our main branch. To do this, we use the 'git merge <branch_name>' command. This command will merge the branch specified by branch name with the branch you are currently on. 



